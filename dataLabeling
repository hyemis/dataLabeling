import glob
import os
import shutil

# 표본 디렉토리 / 작업 디렉토리 경로 수정
text = '/Users/johyemi/Desktop/work_text'
today = '/Users/johyemi/Desktop/work_today'

files_text = glob.glob(f"{text}/*.txt")
files_today = glob.glob(f"{today}/*.txt")

files_today.sort()

file_names_text = {os.path.basename(file) for file in files_text}
file_names_today = {os.path.basename(file) for file in files_today}

# 1. 작업 파일명 변경
for index, file_path in enumerate(files_today, start=1):
    file_extension = os.path.splitext(file_path)[1]
    new_name = os.path.join(today, f"{index:02d}{file_extension}")
    os.rename(file_path, new_name)
    print(f"File renamed to '{new_name}'")

files_today = glob.glob(f"{today}/*.txt")
file_names_today = {os.path.basename(file) for file in files_today}

common_files = file_names_text & file_names_today
print(f"Common files: {common_files}")

# 2. 표본/ 작업 파일명 동일한 경우 1-16줄 텍스트 대치
for file_name in common_files:
    file_path_text = os.path.join(text, file_name)
    file_path_today = os.path.join(today, file_name)

    try:
        with open(file_path_text, 'r', encoding='utf-8') as file:
            lines_text = file.readlines()

        lines_to_copy = lines_text[:16]

        with open(file_path_today, 'r', encoding='utf-8') as file:
            lines_today = file.readlines()

        lines_today[:16] = lines_to_copy

        # 작업 파일 키워드 대치
        if len(lines_today) > 16:
            first_line_today = lines_today[0].strip()
            words = first_line_today.split()
            first_word = words[0] if len(words) > 0 else None

            if first_word:
                # 첫 번째 단어가 '변호사'로 끝나는지 확인
                if first_word.endswith('변호사'):
                    replacement_word = first_word
                else:
                    replacement_word = f"{first_word} 변호사"

                for i in range(16, len(lines_today)):
                    lines_today[i] = lines_today[i].replace('변호사', replacement_word)

        with open(file_path_today, 'w', encoding='utf-8') as file:
            file.writelines(lines_today)

        print(f"Updated file '{file_path_today}'")

    except Exception as e:
        print(f"An error occurred while processing '{file_path_today}': {e}")

# 3. 작업 파일명 변경
for file_path in files_today:
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            first_line = file.readline().strip()

        file_extension = os.path.splitext(file_path)[1]

        new_name = os.path.join(today, f"{first_line}{file_extension}")

        if os.path.exists(new_name):
            # 파일 이름이 중복되지 않도록 처리 (예: 추가 번호 붙이기)
            base_name, ext = os.path.splitext(first_line)
            counter = 1
            while os.path.exists(new_name):
                new_name = os.path.join(today, f"{base_name}_{counter}{ext}")
                counter += 1

        os.rename(file_path, new_name)
        print(f"File renamed to '{new_name}'")

    except Exception as e:
        print(f"An error occurred while renaming '{file_path}': {e}")

# 디렉토리 2 내 파일들의 이름에 따라 디렉토리 생성 및 파일 이동
def move_files_based_on_keyword(directory, keywords):
    """
    :param directory: 작업 디렉토리
    :param keywords: 키워드(서울, 세종)
    """
    files = glob.glob(os.path.join(directory, '*.txt'))

    for file_path in files:
        file_name = os.path.basename(file_path)

        # 디렉토리 생성
        for keyword in keywords:
            if keyword in file_name:
                # 디렉토리 경로 생성
                target_directory = os.path.join(directory, keyword)
                if not os.path.exists(target_directory):
                    os.makedirs(target_directory)

                # 파일 이동
                new_file_path = os.path.join(target_directory, file_name)
                try:
                    shutil.move(file_path, new_file_path)
                    print(f"Moved '{file_path}' to '{new_file_path}'")
                except Exception as e:
                    print(f"An error occurred while moving '{file_path}': {e}")
                break  # 첫 번째 키워드에 맞으면 더 이상 다른 키워드를 검사할 필요 없음

# 키워드 목록
keywords = ['서울', '세종']

# 키워드에 따라 파일 이동
move_files_based_on_keyword(today, keywords)